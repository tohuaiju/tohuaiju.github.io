<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>sourse</title>
    <url>/2024/01/23/sourse/</url>
    <content><![CDATA[<img src="./sourse/gif1.gif">

<img src="./sourse/jpg1.jpg" alt="jpg">

<p><a href="https://zhuanlan.zhihu.com/p/265077468">hexo博客如何插入图片 - 知乎 (zhihu.com)</a></p>
<p><img src="/sourse/jpg1.jpg" alt="jpg"></p>
<p><img src="/sourse/gif1.gif" alt="gif"></p>
]]></content>
  </entry>
  <entry>
    <title>“测试sourse”</title>
    <url>/2024/01/23/%E2%80%9C%E6%B5%8B%E8%AF%95sourse%E2%80%9D/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2023/11/28/%E6%B5%8B%E8%AF%95-1/</url>
    <content><![CDATA[<p>测试</p>
<span id="more"></span>
<p>11</p>
<blockquote>
<p>文章测试</p>
</blockquote>
<h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><ul>
<li>定义：能保证两个相等的数，经过排序之后，其在序列的前后位置顺序不变。（A1&#x3D;A2，排序前A1在A2前面，排序后A1还在A2前面）</li>
<li>意义：<mark class="hltr-cyan">稳定性本质是维持具有相同属性的数据的插入顺序</mark>，如果后面需要使用该插入顺序排序，则稳定性排序可以避免这次排序。</li>
<li>某些情况，尤其符合数据结构的时候，包含多个关键字，那么具有相同关键字的元素会因为排序算法是否稳定而发生变化，如果排序算法稳定，那么仍然按照原有顺序，对于某些应用很重要。</li>
</ul>
<h2 id="内or外部排序"><a href="#内or外部排序" class="headerlink" title="内or外部排序"></a>内or外部排序</h2><ul>
<li>所谓内存（主存）or外存（辅助存储器）的概念，属于计组，简单说就是，16G的运行内存还是1T的固态硬盘。很显然，一个是直接连接到CPU，速度快的临时存储数据，一个是外接，速度一般但长期保存数据。</li>
<li><mark class="hltr-cyan">内外部排序的区别是能否将所有待排序的元素都放到内存中</mark>。如果能全部放进去，就使用内部排序；如果不能，通常采取多路归并排序算饭去实现，基本思想是将数据分成若干个可以装进内存的块，对每个块进行内部排序，然后在内存中维护一个指向每个块最小元素的指针数组，不断从每个块中选取最小元素进行合并，知道所有元素被合并为止。</li>
</ul>
<blockquote>
<p>特殊提醒标注测试</p>
</blockquote>
<div style="background-color: #eafbea; padding: 10px; border-radius: 5px;">
    <i class="fas fa-lightbulb">&nbsp;提示</i><br>
    相关的小建议
</div>



<p>12</p>
<div style="background-color: #ADD8E6; padding: 10px;border-radius: 5px;">
    <i class="fas fa-exclamation-circle">&nbsp;信息</i><br>
    特殊信息提示
</div>



<p>12</p>
<blockquote>
<div style="background-color: #ADD8E6; padding: 10px;">
  <i class="fas fa-exclamation-circle">&nbsp;信息</i><br>
    特殊信息提示
</div>
</blockquote>
<p>12</p>
<blockquote>
<div style="background-color: #ADD8E6; padding: 10px;border-radius: 5px;">
   <i class="fas fa-exclamation-circle">&nbsp;信息</i><br>
   特殊信息提示
</div>
</blockquote>
<p>12</p>
<p>12</p>
<blockquote>
<p>代码测试</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_type = [</span><br><span class="line">    type_special_treatment(row[carinfo_parsed.columns[<span class="number">0</span>]], row[carinfo_parsed.columns[<span class="number">1</span>]])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">next</span>((column <span class="keyword">for</span> column <span class="keyword">in</span> columns <span class="keyword">if</span> re.search(pattern, <span class="built_in">str</span>(row[column]))), <span class="string">&#x27;0&#x27;</span>) == <span class="number">2</span> <span class="keyword">else</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> _, row <span class="keyword">in</span> carinfo_parsed.iterrows()</span><br><span class="line">]</span><br><span class="line">list_type = [<span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> x != <span class="number">0</span>, <span class="built_in">filter</span>(<span class="literal">None</span>, x))) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">set</span>(<span class="built_in">tuple</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> list_type)]</span><br><span class="line">list_type = [item[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> list_type <span class="keyword">if</span> <span class="built_in">len</span>(item) &gt; <span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_type2 = [</span><br><span class="line">    row[carinfo_parsed.columns[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">next</span>((column <span class="keyword">for</span> column <span class="keyword">in</span> columns <span class="keyword">if</span> re.search(pattern, <span class="built_in">str</span>(row[column]))), <span class="string">&#x27;0&#x27;</span>) == <span class="number">1</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> _, row <span class="keyword">in</span> carinfo_parsed.iterrows()</span><br><span class="line">]</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> type_str <span class="keyword">in</span> list_type2:</span><br><span class="line">    <span class="keyword">for</span> brand <span class="keyword">in</span> list_brand:</span><br><span class="line">        <span class="keyword">if</span> type_str.startswith(brand):</span><br><span class="line">            remain_str = type_str.replace(brand, <span class="string">&#x27;&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^[\u4e00-\u9fa5]+$&#x27;</span>, brand):  <span class="comment"># 中文格式</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> re.search(<span class="string">r&#x27;[\u4e00-\u9fa5]&#x27;</span>, remain_str):</span><br><span class="line">                    result.append(type_str)</span><br><span class="line">            <span class="keyword">elif</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^[a-zA-Z]+$&#x27;</span>, brand):  <span class="comment"># 英文格式</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> re.search(<span class="string">r&#x27;[a-zA-Z]&#x27;</span>, remain_str):</span><br><span class="line">                    result.append(type_str)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result.append(type_str)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_type.extend(result)</span><br><span class="line">list_type = <span class="built_in">list</span>(<span class="built_in">set</span>(<span class="built_in">filter</span>(<span class="literal">None</span>, list_type)))</span><br><span class="line">list_type = [x <span class="keyword">for</span> x <span class="keyword">in</span> list_type <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> list_brand]</span><br></pre></td></tr></table></figure>



<blockquote style="border-left-color: red;">
  这是一个引用
</blockquote>
]]></content>
  </entry>
</search>
