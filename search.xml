<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据结构绪论</title>
    <url>/2024/03/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/</url>
    <content><![CDATA[<h3 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h3><blockquote>
<p>新课程之所以难以学习，很大程度上是因为这些定义都是先辈千百年来的规定，人定下来的，越是高级的课程，越与生活脱节。幽默风趣的讲课老师受到别人喜欢，也是对于这些定义有自己的，通俗的理解，但我们仍然要记得理解和定义相悖的时候，以定义为准，对那些老师如此，对我这种小白文更如此。</p>
<p>小白级的写文，大佬勿怪。如果有任何问题或建议，请通过邮件和我联系。</p>
</blockquote>
<p>开始接触数据结构之前，我们先看一个公式：“算法+数据结构&#x3D;程序”，即“Algorithm+Data Structures&#x3D;Programs”，提出者是1984年图灵奖得主、Pascal之父——尼古拉斯·沃斯。</p>
<div style="width: 80%; margin: 0 auto; text-align: center;">
    <div style="width: 40%; max-width: 160px; display: inline-block; vertical-align: middle; text-align: center;">
        <img src="https://img2.imgtp.com/2024/03/19/36kcq3WK.png" alt="Your Image" style="max-width: 100%; height: auto;">
    </div>
    <div style="width: 40%; max-width: 400px; display: inline-block; vertical-align: middle; text-align: center; padding-left: 20px;">
        <div style="display: inline-block; text-align: center;">
            <p>
                Niklaus Wirth/尼古拉斯・沃斯
                <br>1934.02.15—2024.01.01
                <br>Pascal之父
                <br>1984年图灵奖得主
            </p>
        </div>
    </div>
</div>
<details> <summary>一些小声哔哔</summary>沉睡在长河里的先贤，好像并不会特地因为ta的逝世而难过，但当我们的时间轨迹有所接轨的时候，就别样惆怅了。</details>

<p>我们可以从这个公式展开对数据结构的思考：学习一门新程序设计语言的唯一途径就是使用它编写程序<a href="#refer-anchor-1"><sup>1</sup></a>，而程序却是由数据结构和算法组成。我们可以理解为：<strong>学习一门新的程序设计语言就好比是学习如何使用一个新的工具箱，熟悉其中的各种工具（语法和特性），并学会如何使用这些工具来组织数据（数据结构）和完成任务（算法）</strong>。</p>
<p>我们现在的任务就是<strong>学习如何更好地组织数据</strong>，同时我们也要认识到这种组织是没有所谓最优解的，或说合适就是最好的选择。</p>
<p>翻开数据结构的课本，我们会发现，还有查找，排序等章节，它们不仅可以算作数据结构三要素之一数据运算的部分，还可以算作比较简单的算法。实际上，在学习领域里，很少有一本书单纯地只谈论数据结构或者只谈论算法。它们常常被交织在一起，彼此相互依存，相辅相成。</p>
<p>主要是因为：</p>
<ul>
<li><p>数据结构是算法实现的基础，就如同建筑的基石支撑着整座建筑一样。算法总是依赖于某种数据结构来实现，就像一位厨师需要合适的工具和材料来烹饪美食一样，毕竟巧妇难为无米之炊。</p>
</li>
<li><p>在发展一种新算法的过程中，往往需要构建适合该算法的数据结构，这就像是为一场舞蹈创作特定的舞台道具一样。</p>
</li>
<li><p>而一种数据结构如果脱离了算法，其实就像是一台停止运转的机器，失去了实用性和意义。</p>
</li>
</ul>
<p>一个不太切当的比喻，数据结构对于算法，好比语法对于数据结构，是前提，前置条件，当然我们不会提留在这个层面太久，毕竟我们的目的是解决问题，而不是设计繁杂的知识框架供人瞻仰。当然，这种说法就把它们割裂开来了，只能是不入流的理解。</p>
<p>虽然数据结构和算法有一定的区别，但它们的关系密不可分。算法更加抽象，强调对问题的建模和解决方案的设计，就像是指导你如何走舞步的舞谱。而数据结构则更接近实现的层面，关注具体的存储和操作细节，就像是舞台上的舞者在执行具体的舞步动作。</p>
<p>因此，可以说数据结构是数据之间的有机关系，而算法则是对数据进行操作的步骤。这两个概念之间的逻辑关系贯穿了整个程序世界，就像是一对相互依偎的双胞胎，无法分割。</p>
<p><strong>总的来说</strong>，虽然课程叫做数据结构，但其实是数据结构+算法，或者直接的说，数据结构就是我们实现任务（算法）的方式罢了。只不过在初期学习阶段，我们必须认真学习其原理，掌握这些基础数据结构，形成我们自己的数据思维，才好完成我们自己的算法。</p>
<h3 id="数据结构是什么？"><a href="#数据结构是什么？" class="headerlink" title="数据结构是什么？"></a>数据结构是什么？</h3><p>教材对于它的定义是，相互之间存在一种或多种特定关系的数据元素的集合（一门研究非数值计算的程序设计问题中计算机操作对象以及它们之间的关系和操作等的学科）。</p>
<p>我们通俗的讲，就是组织我们的工具箱，一件件工具合理归置，让我们使用的时候更加方便，效率更高。</p>
<p>所以，<strong>数据结构就是关于如何组织和管理数据的一门学科，它帮助我们更好地理解和利用计算机中的信息。</strong></p>
<p>以一般线性表的顺序实现方式（顺序表）为例（不必纠结这个例子，只为了建立理解，从文字到代码）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    Elemtype data[Maxsize];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;Sqlist;</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>数据元素集合</strong>：在这段代码中，数据元素集合由数组 <code>data</code> 组成。每个元素都有一个索引，通过这个索引可以唯一地确定该元素在集合中的位置。</li>
<li><strong>特定关系</strong>：数据元素之间的特定关系体现在以下几个方面：<ul>
<li>数组中的元素是线性排列的，即每个元素都有一个相对位置。</li>
<li>顺序表中的每个元素都有一个相对位置和一个唯一的下标，这个下标与数组中元素的索引一一对应。</li>
<li><code>length</code> 变量记录了顺序表中当前存储的元素个数，这个值体现了元素之间的数量关系。</li>
</ul>
</li>
<li><strong>Maxsize 的设定</strong>：<code>Maxsize</code> 是一个常量，表示顺序表中数组 <code>data</code> 的最大容量。这个值限制了顺序表中可以存储的元素个数，也体现了元素之间的数量关系。</li>
</ol>
<p>总之，这段代码通过结构体 <code>Sqlist</code>，数组 <code>data</code>，和整型变量 <code>length</code> 的定义，体现了一种特定的数据元素集合，其中的元素之间存在着明确的位置关系和数量关系，这就是数据结构的基本特点之一。</p>
<h3 id="数据结构三要素"><a href="#数据结构三要素" class="headerlink" title="数据结构三要素"></a>数据结构三要素</h3><p>数据结构是由数据的逻辑结构、存储结构和数据运算三要素支撑的，它们共同描述了数据元素之间的组织方式、存储方式和操作方式，从而为数据的组织、存储和处理提供了基础和支持。</p>
<h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h4><p><strong>逻辑结构是指数据元素之间的逻辑关系，即逻辑关系上描述数据（如何组织和描述数据元素之间的关系）。</strong></p>
<p>值得注意的是，逻辑结构和数据存储（存储结构）是没有关系的，是独立于计算机的（在进行数据结构设计时，首先需要考虑数据元素之间的逻辑关系，已确定最合适的数据结构类型，然后再根据具体的存储需求选择合适的存储结构进行实现）。也就是说一种逻辑结构可以由多种数据存储方式实现，而且不分优劣，以适合当前需求为主。</p>
<center>
    <img src="https://img2.imgtp.com/2024/03/20/HUQtQ8JZ.png">
</center>


<p><strong>逻辑结构就好比，组织工具箱的时候，十字螺丝刀和一字螺丝刀要放一起，顺手；锤子和螺丝刀不一定，没什么必要；一种组织思维的体现。</strong></p>
<h4 id="存储结构（物理结构）"><a href="#存储结构（物理结构）" class="headerlink" title="存储结构（物理结构）"></a>存储结构（物理结构）</h4><p>存储结构是指数据结构在计算机中的表示（也叫映像），包括数据元素的表示和关系的表示。</p>
<p>常见的有<strong>顺序</strong>，<strong>链式</strong>，<strong>索引</strong>及<strong>哈希存储</strong>。</p>
<p>为了能更好解释存储结构的作用，我们提前引入线性表，也就是下一章节的内容，这里只是为了帮助理解。</p>
<p>简单做个介绍：线性表就是具有相同数据结构的$n(n\geqslant0)$个元素的有限序列。线性表的主要实现方式有两种（说主要，说明还有其他，但这个level就足够了，不仅是因为课程要求，还有什么块链式存储，跳表，听名字就知道它们伟岸地让我一个小小的练气境修士无法靠近）：<strong>顺序存储</strong>和<strong>链式存储</strong>。</p>
<p>&#x3D;&#x3D;这里我想放个图，就是内存中顺序存储和链式存储的区别&#x3D;&#x3D;</p>
<p><strong>存储结构就好比，组织工具箱的时候，我的各种螺丝刀要放在一起，那是挂在包外面，还是放在包的内层里面，我的摆放方式，那么就需要考虑，在使用工具频率这种前提下，我怎么摆放效率更高（实际应用不一定高效一定好，可能为了成本或说其他原因，我们要找合适的，合适的才是最好的）。</strong></p>
<h4 id="数据运算"><a href="#数据运算" class="headerlink" title="数据运算"></a>数据运算</h4><p>数据运算是指对数据进行操作和处理的过程。</p>
<p>通常涉及对存储在计算机内存或其他存储设备中的数据执行各种操作，以实现特定的目标或解决特定的问题。这些操作可以包括但不限于以下内容：</p>
<ul>
<li>插入：将新的数据项插入到数据结构中的适当位置。</li>
<li>删除：从数据结构中移除特定的数据项。</li>
<li>查找：在数据结构中查找特定的数据项或执行某种条件查询。</li>
<li>修改：对数据结构中的现有数据项进行修改或更新。</li>
<li>排序：对数据进行按照一定规则重新排列的操作。</li>
<li>合并：将两个或多个数据结构合并成一个更大的数据结构。</li>
<li>分割：将一个数据结构分割成两个或多个较小的数据结构。</li>
<li>计算：对数据进行各种数学或逻辑运算，例如加减乘</li>
</ul>
<p>要是放在我们工具箱里，就是锤子锤钉，螺丝刀拧螺丝。</p>
<center>
    <img src="https://img2.imgtp.com/2024/03/21/fDwkIPpX.jpg">
</center>



<p><strong>换个gif，自己去爬视频做gif有点麻烦，之前代码找不到了</strong></p>
<h3 id="数据类型与数据结构"><a href="#数据类型与数据结构" class="headerlink" title="数据类型与数据结构"></a>数据类型与数据结构</h3><p>这里要提区别，还有抽象数据类型</p>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>这里就想对简单了，概念，重点就有个算法效率度量，其他的也展不开</p>
<h4 id="算法效率的度量"><a href="#算法效率的度量" class="headerlink" title="算法效率的度量"></a>算法效率的度量</h4><h5 id="事前统计"><a href="#事前统计" class="headerlink" title="事前统计"></a>事前统计</h5><h5 id="事后统计"><a href="#事后统计" class="headerlink" title="事后统计"></a>事后统计</h5><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><div id="refer-anchor-1"></div>

<p>[1] Kernighan, Brian W., and Dennis M. Ritchie. (2022). C程序设计语言第二版. 徐宝文，李志 (译). 机械工业出版社, 第一页.</p>
<div id="refer-anchor-2"></div>

<p>[2] [Wikiped]</p>
]]></content>
      <tags>
        <tag>考研</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
